# {{Accounts}} Model and Repository Classes Design Recipe

## 1. Design and create the Table

SKIP
```

## 2. Create Test SQL seeds

Your tests will depend on data stored in PostgreSQL to run.

If seed data is provided (or you already created it), you can skip this step.

```sql
-- EXAMPLE
-- (file: spec/seeds_accounts.sql)

-- Write your SQL seed here. 

-- First, you'd need to truncate the table - this is so our table is emptied between each test run,
-- so we can start with a fresh state.
-- (RESTART IDENTITY resets the primary key)

TRUNCATE TABLE accounts, posts RESTART IDENTITY;

-- Below this line there should only be `INSERT` statements.
-- Replace these statements with your own seed data.

INSERT INTO accounts (email_address, username) VALUES ('1234@yahoo.com', '1234new');
INSERT INTO accounts (email_address, username) VALUES ('5678@hotmail.com', '5678old');

INSERT INTO posts (title, content, views) VALUES ('Day one', 'Trip to Manchester', '5');
INSERT INTO posts (title, content, views) VALUES ('Day two', 'Trip to London', '10');
```

Run this SQL file on the database to truncate (empty) the table, and insert the seed data. Be mindful of the fact any existing records in the table will be deleted.

```bash
psql -h 127.0.0.1 social_network < ./spec/seeds_accounts.sql
```

## 3. Define the class names

Usually, the Model class name will be the capitalised table name (single instead of plural). The same name is then suffixed by `Repository` for the Repository class name.

```ruby
# Table name: accounts

# Model class
# (in lib/account.rb)
class Account
end

# Repository class
# (in lib/account_repository.rb)
class AccountRepository
end

# Table name: posts

# Model class
# (in lib/post.rb)
class Post
end

# Repository class
# (in lib/post_repository.rb)
class PosttRepository
end
```

## 4. Implement the Model class

Define the attributes of your Model class. You can usually map the table columns to the attributes of the class, including primary and foreign keys.

```ruby
# Table name: accounts

# Model class
# (in lib/account.rb)

class Account

  # Replace the attributes by your own columns.
  attr_accessor :id, :email_address, :username
end

# Model class
# (in lib/post.rb)

class Post

  # Replace the attributes by your own columns.
  attr_accessor :id, :title, :content, :views, :account_id
end
```

## 5. Define the Repository Class interface

Your Repository class will need to implement methods for each "read" or "write" operation you'd like to run against the database.

Using comments, define the method signatures (arguments and return value) and what they do - write up the SQL queries that will be used by each method.

```ruby
# Table name: accounts

# Repository class
# (in lib/account_repository.rb)

class AccountRepository

  # Selecting all records
  # No arguments
  def all
    # Executes the SQL query:
    # SELECT id, email_address, username FROM accounts;

    # Returns an array of Account objects.
  end

  # Gets a single record by its ID
  # One argument: the id (number)
  def find(id)
    # Executes the SQL query:
    # SELECT id, email_address, username FROM accounts WHERE id = $1;

    # Returns a single Account object.
  end

  # Creates a single record
  # One argument: the object account
  def create(account)
  # Executes the SQL query:
  # INSERT INTO accounts (email_address, username) VALUES ($1, $2)

  # Returns nothing
  end

  # Update a single record
  # One argument: the object account
  def update(account)
  # Executes the SQL query:
  # UPDATE accounts SET username = $1 WHERE id = $2

  # Returns nothing
  end

  # Deletes a single record
  # One arguement: id number
  def delete(id)
  # Executes the SQL query:
  # DELETE FROM accounts WHERE id = $1

  # Returns nothing
  end
end

# Table name: posts

# Repository class
# (in lib/post_repository.rb)

class PostRepository

  # Selecting all records
  # No arguments
  def all
    # Executes the SQL query:
    # SELECT id, title, content, views FROM posts;

    # Returns an array of Post objects.
  end

  # Gets a single record by its ID
  # One argument: the id (number)
  def find(id)
    # Executes the SQL query:
    # SELECT id, title, content, views FROM posts WHERE id = $1;

    # Returns a single Post object.
  end

  # Creates a single record
  # One argument: the object post
  def create(post)
  # Executes the SQL query:
  # INSERT INTO posts (title, content, views) VALUES ($1, $2, $3)

  # Returns nothing
  end

  # Update a single record
  # One argument: the object post
  def update(post)
  # Executes the SQL query:
  # UPDATE posts SET views = $1 WHERE id = $2

  # Returns nothing
  end

  # Deletes a single record
  # One arguement: id number
  def delete(id)
  # Executes the SQL query:
  # DELETE FROM posts WHERE id = $1

  # Returns nothing
  end
end
```

## 6. Write Test Examples

Write Ruby code that defines the expected behaviour of the Repository class, following your design from the table written in step 5.

These examples will later be encoded as RSpec tests.

```ruby
#ACCOUNTS
# 1
# Get all accounts

repo = AccountRepository.new
accounts = repo.all
accounts.length # =>  2
accounts[0].id # =>  1
accounts[0].username # =>  '1234new'
accounts[1].id # =>  2
accounts[1].email_address # =>  '5678@hotmail.com'

# 2
# Get a single account

repo = AccountRepository.new
account = repo.find(1)
account.id # =>  1
account.email_address # =>  '1234@yahoo.com'
account.username # =>  '1234new'

# 3
# Create a new account
repo = AccountRepository.new
new_acc = Account.new
new_acc.id # => 3
new_acc.email_address # => '9012@gmail.com'
new_acc.username # => 'noobie'

# 4
# Update an account
repo = AccountRepository.new
repo.update(account)
account.username # => 'Bobbles'

# 5
# Delete an account
repo = AccountRepository.new
repo.delete(2)
repo.length # => 1

#POSTS
# 1
# Get all posts

repo = PostRepository.new
posts = repo.all
posts.length # =>  2
posts[0].id # =>  1
posts[0].title # =>  'Day one'
posts[1].id # =>  2
posts[1].content # =>  'Trip to London'
posts[1].views # =>  '10'

# 2
# Get a single post

repo = PostRepository.new
post = repo.find(1)
post.id # =>  1
post.title # =>  'Day one'
post.content # =>  'Trip to Manchester'

# 3
# Create a new post
repo = PostRepository.new
new_post = Post.new
new_post.id # => 3
new_post.title # => 'Day five'
new_post.content # => 'Trip to Inverness'
new_post.views # => '9'

# 4
# Update a post
repo = PostRepository.new
repo.update(post)
post.views # => '50'

# 5
# Delete a post
repo = PostRepository.new
repo.delete(2)
repo.length # => 1
```

Encode this example as a test.

## 7. Reload the SQL seeds before each test run

Running the SQL code present in the seed file will empty the table and re-insert the seed data.

This is so you get a fresh table contents every time you run the test suite.

```ruby
# file: spec/account_repository_spec.rb

def reset_accounts_table
  seed_sql = File.read('spec/seeds_accounts.sql')
  connection = PG.connect({ host: '127.0.0.1', dbname: 'social_network' })
  connection.exec(seed_sql)
end

describe AccountRepository do
  before(:each) do 
    reset_accounts_table
  end

  # (your tests will go here).
end

# file: spec/post_repository_spec.rb

def reset_posts_table
  seed_sql = File.read('spec/seeds_accounts.sql')
  connection = PG.connect({ host: '127.0.0.1', dbname: 'social_network' })
  connection.exec(seed_sql)
end

describe PostRepository do
  before(:each) do 
    reset_posts_table
  end

  # (your tests will go here).
end
```

## 8. Test-drive and implement the Repository class behaviour

_After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour._

<!-- BEGIN GENERATED SECTION DO NOT EDIT -->

---

**How was this resource?**  
[😫](https://airtable.com/shrUJ3t7KLMqVRFKR?prefill_Repository=makersacademy%2Fdatabases&prefill_File=resources%2Frepository_class_recipe_template.md&prefill_Sentiment=😫) [😕](https://airtable.com/shrUJ3t7KLMqVRFKR?prefill_Repository=makersacademy%2Fdatabases&prefill_File=resources%2Frepository_class_recipe_template.md&prefill_Sentiment=😕) [😐](https://airtable.com/shrUJ3t7KLMqVRFKR?prefill_Repository=makersacademy%2Fdatabases&prefill_File=resources%2Frepository_class_recipe_template.md&prefill_Sentiment=😐) [🙂](https://airtable.com/shrUJ3t7KLMqVRFKR?prefill_Repository=makersacademy%2Fdatabases&prefill_File=resources%2Frepository_class_recipe_template.md&prefill_Sentiment=🙂) [😀](https://airtable.com/shrUJ3t7KLMqVRFKR?prefill_Repository=makersacademy%2Fdatabases&prefill_File=resources%2Frepository_class_recipe_template.md&prefill_Sentiment=😀)  
Click an emoji to tell us.

<!-- END GENERATED SECTION DO NOT EDIT -->
